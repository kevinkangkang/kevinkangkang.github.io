<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UML Class Diagrams</title>
      <link href="/2020/03/13/Software%20Engineering/UML/Class/"/>
      <url>/2020/03/13/Software%20Engineering/UML/Class/</url>
      
        <content type="html"><![CDATA[<h1 id="Short"><a href="#Short" class="headerlink" title="Short"></a>Short</h1><p>The Class Diagrams can show what member a class have. Significantly, it has capacity of illustrating the relation among these classes. An association has the purpose of relating objects of two classes. </p><h1 id="Element-of-Class-Diagrams"><a href="#Element-of-Class-Diagrams" class="headerlink" title="Element of Class Diagrams"></a>Element of Class Diagrams</h1><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p><a href="/img/post_loadding.svg" data-fancybox="group" data-caption="image-20200313122252450" class="fancybox"><img alt="image-20200313122252450" data-src="/2020/03/13/Software%20Engineering/UML/Class/image-20200313122252450.png" src="/img/post_loadding.svg" class="lazyload" title="image-20200313122252450"></a></p><ul><li>public : +</li><li>protect : #</li><li>private : - </li></ul><h2 id="Generalization-amp-Realization"><a href="#Generalization-amp-Realization" class="headerlink" title="Generalization &amp; Realization"></a>Generalization &amp; Realization</h2><p><a href="/img/post_loadding.svg" data-fancybox="group" data-caption="Generalization &amp; Realization" class="fancybox"><img alt="Generalization &amp; Realization" data-src="/2020/03/13/Software%20Engineering/UML/Class/image-20200313123327135.png" src="/img/post_loadding.svg" class="lazyload" title="Generalization &amp; Realization"></a></p><p>“Generalization” and “Realization” are easy to understand.</p><h2 id="Composition-amp-Aggregation"><a href="#Composition-amp-Aggregation" class="headerlink" title="Composition &amp; Aggregation"></a>Composition &amp; Aggregation</h2><p><a href="/img/post_loadding.svg" data-fancybox="group" data-caption="Composition &amp; Aggregation" class="fancybox"><img alt="Composition &amp; Aggregation" data-src="/2020/03/13/Software%20Engineering/UML/Class/image-20200313123636994.png" src="/img/post_loadding.svg" class="lazyload" title="Composition &amp; Aggregation"></a></p><p>The relation of them focus on the whole and the part and two objects cooperate together.</p><p><strong>The difference between them:</strong></p><p>“Composition” emphasize the indivisible relation of  the whole and the part such as the company and the department. (department to company) If the company go bankrupt, the department of this company also disappears. </p><p>On the other hand, “Aggregation” also point to the relation of  the whole and the part. However, it would weaker than “Composition” and they can live  without each other. (employee to company) For example, those employees could go to another company when it happened. </p><h2 id="Association-amp-Dependency"><a href="#Association-amp-Dependency" class="headerlink" title="Association &amp; Dependency"></a>Association &amp; Dependency</h2><p><a href="/img/post_loadding.svg" data-fancybox="group" data-caption="Association &amp; Dependency " class="fancybox"><img alt="Association &amp; Dependency " data-src="/2020/03/13/Software%20Engineering/UML/Class/image-20200313182122224.png" src="/img/post_loadding.svg" class="lazyload" title="Association &amp; Dependency "></a></p><p>The relation of them focus on equity of two objects.</p><p><strong>The difference between them:</strong></p><p>“Association” is stronger than “Dependency”. “Dependency” means a divisible or indivisible relation, and it emphasize the “use”. For example, a cat need water, so it can say that a cat “depend on” water. </p><p>“Association” have an emphasis on the two objects have a relation. For instance, a man and a woman have a marriage. It also can refer to teacher-student relation.</p><p>Moreover, “Association” can be one-way or two-way. A Tom’s wife is Lucy and Lucy’s husband is Tom.</p><h1 id="The-Intensity-of-Relation"><a href="#The-Intensity-of-Relation" class="headerlink" title="The Intensity of Relation"></a>The Intensity of Relation</h1><p>Generalization = Realization &gt; </p><p>Composition &gt; Aggregation &gt; </p><p>Association &gt; Dependency </p><h1 id="The-Code-of-Relation"><a href="#The-Code-of-Relation" class="headerlink" title="The Code of Relation"></a>The Code of Relation</h1><p>Here is the code by java.</p><p>It is significant to understand the code of the last four relation.</p><p>“Composition”, “Aggregation” and “Association” can be shown by the member of a class.</p><div class="code-area-wrap"><div class="highlight-tools"><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># A.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># B.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>A points to B.</p><p>“Composition”: A and B are respectively department and company.</p><p>“Aggregation”: A and B are respectively employee and company.</p><p>“Association”: A and B are respectively husband and wife.</p><p>By the way, “Two-way Association” can be expressed by the following code.</p><div class="code-area-wrap"><div class="highlight-tools"><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># A.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># B.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>“Dependency”  can be implement by local variables, parameter of class method and the usage of static method.</p><p>Here is a example.</p><div class="code-area-wrap"><div class="highlight-tools"><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># A.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">getB</span><span class="params">(B b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># B.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>A points to B. </p><p>A depend  on B.</p><p><strong>The relation among Controller, Service and Mapper</strong></p><p>I guess a Controller can use more than one Service and a Controller can live without a Service. Thus, it should be the “Aggregation”. The relation of Service and Mapper is the same.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>The photo refer to a passage. I think it a good conclusion for Class Diagrams You can see more in the Reference.</p><p><a href="/img/post_loadding.svg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/2020/03/13/Software%20Engineering/UML/Class/2799767-3f16972d7b062110.png" src="/img/post_loadding.svg" class="lazyload" title="img"></a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.cnblogs.com/pangjianxin/p/7877868.html" target="_blank" rel="noopener">UML类图与类的关系详解</a></p><p>[1]Bernhard Rumpe. Modeling with UML[M].Springer International Publishing:2016.</p><p>[2]Bernhard Rumpe. Agile Modeling with UML[M].Springer International Publishing:2017.</p>]]></content>
      
      
      <categories>
          
          <category> Software Engineering </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software Engineering </tag>
            
            <tag> UML </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML Use Case Diagrams</title>
      <link href="/2020/02/28/Software%20Engineering/UML/Use-Case/"/>
      <url>/2020/02/28/Software%20Engineering/UML/Use-Case/</url>
      
        <content type="html"><![CDATA[<h1 id="Short"><a href="#Short" class="headerlink" title="Short"></a>Short</h1><p>The diagram of use cases is designed for describing <strong>what the users of the system can do</strong>. </p><p>So when whiting use cases, you need to focus on <strong>the behavior of  every user</strong>, including the interaction of them. Possibly it would be involved in some processes. However, it is not the point.</p><h1 id="Use-Case-model-elements"><a href="#Use-Case-model-elements" class="headerlink" title="Use Case model elements"></a>Use Case model elements</h1><p>​    This photo refers to P41 from <em>Business Information Systems Workshops</em></p><div align="center">    <a href="/img/post_loadding.svg" data-fancybox="group" data-caption="image-20200228214725504" class="fancybox"><img alt="image-20200228214725504" style="zoom:70%;" data-src="/2020/02/28/Software%20Engineering/UML/Use-Case/image-20200228214725504.png" src="/img/post_loadding.svg" class="lazyload" title="image-20200228214725504"></a>    <div>        From: [2]Business Information Systems Workshops    </div></div><h2 id="Actor"><a href="#Actor" class="headerlink" title="Actor"></a>Actor</h2><div align="center">    <a href="/img/post_loadding.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="/2020/02/28/Software%20Engineering/UML/Use-Case/image-20200228220811687.png" src="/img/post_loadding.svg" class="lazyload"></a></div><p>“Actor” means the actor of the case such as a student or a teacher. Moreover, “Actor” also can refer to some no-life object. For instance, a timer can help the system clean the history at regular time. </p><h2 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h2><div align="center">    <a href="/img/post_loadding.svg" data-fancybox="group" data-caption="image-20200228214725504" class="fancybox"><img alt="image-20200228214725504" data-src="/2020/02/28/Software%20Engineering/UML/Use-Case/image-20200228220804822.png" src="/img/post_loadding.svg" class="lazyload" title="image-20200228214725504"></a></div><p>“Use Case” means the activities of the “Actor”, it usually consists of a verb and a noun like a student read the book. “read the book” is a “Use Case”.</p><h2 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h2><div align="center">    <a href="/img/post_loadding.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="/2020/02/28/Software%20Engineering/UML/Use-Case/image-20200228220843881.png" src="/img/post_loadding.svg" class="lazyload"></a></div><h2 id="Include"><a href="#Include" class="headerlink" title="Include"></a>Include</h2><div align="center">    <a href="/img/post_loadding.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="/2020/02/28/Software%20Engineering/UML/Use-Case/image-20200228220835829.png" src="/img/post_loadding.svg" class="lazyload"></a></div><p><strong>The difference of Extend and Include</strong></p><p>“Include” means the relation of containing. For example, administrating the people contains register a person, delete a person, update a person and so on.</p><p>“Extend” means that a function has different direction to implement. For example, you can download an English e-book through the form of pdf or word. Therefore, you can say that “download e-book” extend “pdf” or “word”.</p><h2 id="Association"><a href="#Association" class="headerlink" title="Association"></a>Association</h2><ul><li>Association</li></ul><div align="center">    <a href="/img/post_loadding.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="/2020/02/28/Software%20Engineering/UML/Use-Case/image-20200228221254962.png" src="/img/post_loadding.svg" class="lazyload"></a></div><ul><li>Direct Association</li></ul><div align="center">    <a href="/img/post_loadding.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:120%;" data-src="/2020/02/28/Software%20Engineering/UML/Use-Case/image-20200228220856086.png" src="/img/post_loadding.svg" class="lazyload"></a></div><p>The arrow of the “Direct Association” points the direction of the data. It has more specific association than “Association”.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1]Doug Rosenberg,Matt Stephens. Use Case Driven Object Modeling with UML[M].Apress:2007-06-15.</p><p>[2]Virgilijus Sakalauskas,Dalia Kriksciuniene. Business Information Systems Workshops[M].Springer International Publishing:2019-01-07.</p>]]></content>
      
      
      <categories>
          
          <category> Software Engineering </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software Engineering </tag>
            
            <tag> UML </tag>
            
            <tag> Use Case </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Kevin</title>
      <link href="/2020/01/18/hello/hello-world/"/>
      <url>/2020/01/18/hello/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Kevin"><a href="#Hello-Kevin" class="headerlink" title="Hello Kevin"></a>Hello Kevin</h1><blockquote><p>Hello Kevin, this is KevinKK’s blog.</p><p>It is 18th January 2020, and in this year I will graduate from my college. Thus, I wanna create the blog to tell me not to remember study, and I will write what I learn and experience on the road of the Coding, English and Life.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kevin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kevin </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
